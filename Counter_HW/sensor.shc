


$import(studio.shc);

$class(sensor_t){
	#raw:_int;
	#blackMin:_int;
	#whiteMin:_int;
	#value:_int;
	#rtime:_int;
	#ftime:_int;
	#flag:_int;
	
	GetRawValue():int{
		result = self.raw;
		return(result);
	}
	
	GetBlackMin():int{
		result = self.blackMin;
		return(result);
	}
	
	SetBlackMin(value:int){
		self.blackMin = value;
	}
	
	GetWhiteMin():int{
		result = self.whiteMin;
		return(result);
	}
	
	SetWhiteMin(value:int){
		self.whiteMin = value;
	}
	
	GetValue():int{
		result = self.value;
		return(result);
	}
	
	///Flag를 활성화하면 센서 인식 플래그 이후 시간이 바뀌지 않습니다.
	RisingTimeFlagEnable(){
	    self.flag |= 0x01;
	}
	
	FallingTimeFlagEnable(){
	    self.flag |= 0x04;
	}
	
	///Flag를 비활성화하면 가장 마지막에 발생한 Edge를 구합니다.
	RisingTimeFlagDisable(){
	    self.flag &= 0xFC;
	}
	
	FallingTimeFlagDisable(){
	    self.flag &= 0xF3;
	}
	
	GetRisingTime():int{
        result = self.rtime;
        self.flag &= 0xFD;///다음에도 센서 작동하게 함.
        self.rtime = 0;
        return(result);
	}
	
	GetFallingTime():int{
        result = self.ftime;
        self.flag &= 0xF7;
        self.ftime = 0;
        return(result);
	}
}

#sensor():sensor_t[8];
SENSOR_Init(){
	#i(0):int;
	for (i) from (0) to (7){
		sensor[i].raw_ = SENSOR_DATAARR(0) + (4 * i);
		sensor[i].blackMin_ = SENSOR_DATAARR(1) + (4 * i);
		sensor[i].whiteMin_ = SENSOR_DATAARR(2) + (4 * i);
		sensor[i].value_ = SENSOR_DATAARR(3) + (4 * i);
		sensor[i].flag_ = SENSOR_DATAARR(8) + (4 * i);
		sensor[i].rtime_ = SENSOR_DATAARR(9) + (4 * i);
		sensor[i].ftime_ = SENSOR_DATAARR(10) + (4 * i);
	}
	SENSOR_Threshold(1024, 768);
}

SENSOR_Threshold(thh:int, thl:int){
	int(SENSOR_DATAARR(5)) = thh;
	int(SENSOR_DATAARR(6)) = thl;
}

SENSOR_GetState():int{
	#result():int;
	result = int(SENSOR_DATAARR(4));
	result = (~result) & 0xFF;
	return(result);
}

SENSOR_StartTime(arrowDirection:int):int{
    #result():int[4];
    if(arrowDirection == ARROW_RIGHT){
        result[i:0:2] = sensor[i+4].GetFallingTime();
    }
    else{
        result[i:0:2] = sensor[i].GetFallingTime();
    }
    
    for(i)from(0)to(2){
        if(result[i] == 0){
            result[i] = 2147483647;
        }
    }
    
    min = 2147483647;
    min = if(result[i:0:2]<min,result[i],min);
    return(min); 
}

SENSOR_EndTime(arrowDirection:int):int{
    #result():int[4];
    if(arrowDirection == ARROW_RIGHT){
        result[i:0:2] = sensor[i].GetRisingTime();
    }
    else{
        result[i:0:2] = sensor[i+4].GetRisingTime();
    }
    
    max = 0;
    max = if(result[i:0:2]>max, result[i], max);
    return(max);
}









