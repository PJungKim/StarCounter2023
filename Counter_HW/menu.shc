
$import(studio.shc);
$import(matrix.shc);

$class(menu_t){
	#text:ref;
	#color:int;
	#func:ref;
	
	Play(){
		if(val(self.func) != 0){
			self.func();
		}
	}
	
	Print(){
		matrix[1].Print(self.text) with (self.color);
	}
}



menu(){
	///청소할 때 메뉴에 진입해서 계수기가 작동하지 않게 합니다.
	matrix[2].Print("/r청소중/w입니다!");
	
	///#mList():menu_t[8];
	mList = [
	    menu_t("<-", WHITE, NULL),
	    menu_t("CA", WHITE,  Calibration),///캘리브레이션 다시 함.
	    menu_t("RA", RED,    SensorRaw),///센서 순수 값
	    menu_t("NO", YELLOW, SensorNormal),///노멀라이즈된 값.
	    menu_t("ST", ORANGE, SensorState),///스테이트
	    menu_t("RS", BLUE,   ResetRecord),///기록삭제
	    menu_t(">>", VIOLET, NULL),///오른쪽 방향 주행
	    menu_t("<<", VIOLET, NULL)///왼쪽 방향 주행
	];
	
	idx = 0;
	matrix[1].Arrow(0x08);

	while(1){
		sw = SWITCH_Read();
		if(sw == SWITCH_BOTH){
			if(idx == 0){
				matrix[1].Clear();
				break;
			}
			elif(idx == sizeof(mList) / sizeof(menu_t) - 2){
				maskStart = 0x70;
				maskEnd = 0x07;
				arrowDirection = ARROW_RIGHT;
				matrix[1].Clear();
				break;
			}
			elif(idx == sizeof(mList) / sizeof(menu_t) - 1){
				maskStart = 0x07;
				maskEnd = 0x70;
				arrowDirection = ARROW_LEFT;
				matrix[1].Clear();
				break;
			}
			else{
				mList[idx].Play();
			}
			matrix[1].Clear();
			mList[idx].Print();
		}
		elif(sw == SWITCH_1){
			idx = (idx + 1) %% (sizeof(mList) / sizeof(menu_t));
			
			matrix[1].Clear();
			mList[idx].Print();
		}
		elif(sw == SWITCH_2){
			idx = (idx - 1) %% (sizeof(mList) / sizeof(menu_t));
			
			matrix[1].Clear();
			mList[idx].Print();
		}
	}
}

///센서 값을 표시
SensorRaw(){
	matrix[1].Clear();
	while(1){
		sw = SWITCH_Read();
		if(sw == SWITCH_1){
			SENSOR_IR(0);
		}
		elif(sw == SWITCH_2){
			SENSOR_IR(1);
		}
		elif(sw == SWITCH_BOTH){
			break;
		}
		else{
		    for(i)from(0)to(2){
		        value = sensor[i].GetRawValue();
		        matrix[1].AddrWindow(1, 4-2*i, 1, 1);
    			matrix[1].SetDot(0x000101 * (value / 16));
    			Delay(1);
		    }
		    for(i)from(0)to(2){
		        value = sensor[i+4].GetRawValue();
		        matrix[1].AddrWindow(6, 4-2*i, 1, 1);
    			matrix[1].SetDot(0x010001 * (value / 16));
    			Delay(1);
		    }
			matrix[1].Print();
			Delay(1);
		}
	}
	SENSOR_IR(1);
}


///센서 값을 표시
SensorNormal(){
	matrix[1].Clear();
	while(1){
		sw = SWITCH_Read();
		if(sw == SWITCH_1){
			SENSOR_IR(0);
		}
		elif(sw == SWITCH_2){
			SENSOR_IR(1);
		}
		elif(sw == SWITCH_BOTH){
			break;
		}
		else{
		    for(i)from(0)to(2){
		        value = sensor[i].GetValue();
		        matrix[1].AddrWindow(1, 4-2*i, 1, 1);
    			matrix[1].SetDot(0x000101 * (value / 16));
    			Delay(1);
		    }
		    for(i)from(0)to(2){
		        value = sensor[i+4].GetValue();
		        matrix[1].AddrWindow(6, 4-2*i, 1, 1);
    			matrix[1].SetDot(0x010001 * (value / 16));
    			Delay(1);
		    }		
			matrix[1].Print();
			Delay(1);
		}
	}
	SENSOR_IR(1);
}


SensorState(){
	matrix[1].Clear();
	ThresholdPrint();
	while(1){
		sw = SWITCH_Read();
		if(sw == SWITCH_1){
			///Threshold High를 제어합니다.
			thh = int(SENSOR_DATAARR(5));
			thl = int(SENSOR_DATAARR(6));
			thh = thh + 256;
			if(thh >= 4096){
				thh = thl;
			}
			int(SENSOR_DATAARR(5)) = thh;
			ThresholdPrint();
		}
		elif(sw == SWITCH_2){
			///Threshold Low를 제어합니다.
			thh = int(SENSOR_DATAARR(5));
			thl = int(SENSOR_DATAARR(6));
			thl = thl - 256;
			if(thl < 0){
				thl = thh;
			}
			int(SENSOR_DATAARR(6)) = thl;
			ThresholdPrint();
		}
		elif(sw == SWITCH_BOTH){
			break;
		}
		else{
		    for(i)from(0)to(2){
			    value = (SENSOR_GetState() >> i) & 0x01;
			    matrix[1].AddrWindow(1, 4 - 2*i, 1, 1);
			    matrix[1].SetDot(0x00FFFF * value);
			    Delay(1);
			}
            for(i)from(0)to(2){
			    value = (SENSOR_GetState() >> (4+i)) & 0x01;
    			matrix[1].AddrWindow(6, 4 - 2*i, 1, 1);
    			matrix[1].SetDot(0xFF00FF * value);
    			Delay(1);
			}
			matrix[1].Print();
			Delay(1);
		}
	}
	SENSOR_IR(1);
}


ThresholdPrint(){
	thl = int(SENSOR_DATAARR(6));
	thh = int(SENSOR_DATAARR(5));
	for(i)from(0)to(7){
		matrix[1].AddrWindow(3, i, 1, 1);
		if(thl >= (i+1) * 512){
			matrix[1].SetDot(0x00FF00);
		}
		elif(thl < i * 512){
			matrix[1].SetDot(0x000000);
		}
		else{
			matrix[1].SetDot(0x000100 * ((thl % 512) >> 1));
		}
		matrix[1].AddrWindow(4, i, 1, 1);
		if(thh >= (i+1) * 512){
			matrix[1].SetDot(0xFF0000);
		}
		elif(thh < i * 512){
			matrix[1].SetDot(0x000000);
		}
		else{
			matrix[1].SetDot(0x010000 * ((thh % 512) >> 1));
		}
	}
}

///기록을 초기화하는 함수.
ResetRecord(){
	maxTime = 999999;
	maxTime2 = 999999;
	recentTime = 999999;
}

Jemyung(absents:int){
	if(absents >= 4){
		OLED_cout << "/r제명!" << "\n";
	}
	else{
		OLED_cout << "/y통과!" << "\n";
	}
	
	OLED_cout << "/o세미나 보강/r은 /w방학 중 /g언제든지 /y환영/b합니다:)\n";
}








